{
  "name": "realmranshuman/cache-hive",
  "description": "A high-performance caching plugin for WordPress.",
  "type": "wordpress-plugin",
  "license": "GPL-2.0-or-later",
  "authors": [
    {
      "name": "realmranshuman",
      "email": "buddhabhog@gmail.com"
    }
  ],
  "require": {
    "php": ">=7.4",
    "predis/predis": "^3.0",
    "colinmollenhour/credis": "^1.17",
    "matthiasmullie/minify": "^1.3"
  },
  "require-dev": {
    "squizlabs/php_codesniffer": "*",
    "wp-coding-standards/wpcs": "^3.0",
    "dealerdirect/phpcodesniffer-composer-installer": "^1.0",
    "phpcompatibility/phpcompatibility-wp": "*",
    "humbug/php-scoper": "^0.18.17"
  },
  "autoload": {
    "psr-4": {
      "Cache_Hive\\Vendor\\Predis\\": "lib/predis/predis/src/",
      "Cache_Hive\\Vendor\\Psr\\Log\\": "lib/psr/log/src/",
      "Cache_Hive\\Vendor\\Psr\\Http\\Message\\": "lib/psr/http-message/src/",
      "Cache_Hive\\Vendor\\MatthiasMullie\\Minify\\": "lib/matthiasmullie/minify/src/",
      "Cache_Hive\\Vendor\\MatthiasMullie\\PathConverter\\": "lib/matthiasmullie/path-converter/src/"
    },
    "classmap": [
      "lib/colinmollenhour/credis/"
    ]
  },
  "scripts": {
    "lint": "vendor/bin/phpcs --standard=phpcs.ruleset.xml .",
    "fix": "vendor/bin/phpcbf --standard=phpcs.ruleset.xml .",
    "prepare-dirs": [
      "mkdir -p lib/predis/predis/src lib/psr/log/src lib/psr/http-message/src lib/colinmollenhour/credis lib/matthiasmullie/minify/src lib/matthiasmullie/path-converter/src"
    ],
    "prepare-dirs-windows": [
      "if not exist lib mkdir lib",
      "if not exist lib\\predis mkdir lib\\predis",
      "if not exist lib\\predis\\predis mkdir lib\\predis\\predis",
      "if not exist lib\\predis\\predis\\src mkdir lib\\predis\\predis\\src",
      "if not exist lib\\psr mkdir lib\\psr",
      "if not exist lib\\psr\\log mkdir lib\\psr\\log",
      "if not exist lib\\psr\\log\\src mkdir lib\\psr\\log\\src",
      "if not exist lib\\psr\\http-message mkdir lib\\psr\\http-message",
      "if not exist lib\\psr\\http-message\\src mkdir lib\\psr\\http-message\\src",
      "if not exist lib\\colinmollenhour mkdir lib\\colinmollenhour",
      "if not exist lib\\colinmollenhour\\credis mkdir lib\\colinmollenhour\\credis",
      "if not exist lib\\matthiasmullie mkdir lib\\matthiasmullie",
      "if not exist lib\\matthiasmullie\\minify mkdir lib\\matthiasmullie\\minify",
      "if not exist lib\\matthiasmullie\\minify\\src mkdir lib\\matthiasmullie\\minify\\src",
      "if not exist lib\\matthiasmullie\\path-converter mkdir lib\\matthiasmullie\\path-converter",
      "if not exist lib\\matthiasmullie\\path-converter\\src mkdir lib\\matthiasmullie\\path-converter\\src"
    ],
    "dev": [
      "echo 'Step 1/5: Preparing directories...'",
      "@prepare-dirs",
      "echo 'Step 2/5: Installing tools...'",
      "composer install",
      "echo 'Step 3/5: Scoping PHP dependencies...'",
      "php-scoper add-prefix --output-dir=lib --force",
      "echo 'Step 4/5: Refreshing autoloader with scoped files...'",
      "composer dump-autoload --optimize",
      "echo 'Step 5/5: Building JavaScript assets...'",
      "npm install && npm run build",
      "echo '\\nSUCCESS! Development environment is ready.'"
    ],
    "build": [
      "composer dev",
      "echo 'START: Assembling production package...'",
      "rm -rf dist",
      "mkdir -p dist/cache-hive",
      "rsync -rc --exclude-from=.distignore . dist/cache-hive/",
      "cp -R lib dist/cache-hive/",
      "cp -R build dist/cache-hive/",
      "cp composer.dist.json dist/cache-hive/composer.json",
      "echo 'START: Generating final production autoloader...'",
      "cd dist/cache-hive && composer dump-autoload --no-dev --optimize && cd ../..",
      "rm -rf dist/cache-hive/composer.json",
      "echo '\\nSUCCESS! Production-ready plugin is in dist/cache-hive'"
    ],
    "windows-dev": [
      "echo Step 1/5: Preparing directories...",
      "@prepare-dirs-windows",
      "echo Step 2/5: Installing tools...",
      "composer install",
      "echo Step 3/5: Scoping PHP dependencies...",
      "php-scoper add-prefix --output-dir=lib --force",
      "echo Step 4/5: Refreshing autoloader with scoped files...",
      "composer dump-autoload --optimize",
      "echo Step 5/5: Building JavaScript assets...",
      "npm install && npm run build",
      "echo.",
      "echo SUCCESS! Development environment is ready."
    ],
    "windows-build": [
      "composer windows-dev",
      "echo START: Assembling production package...",
      "if exist dist rd /s /q dist",
      "mkdir dist\\cache-hive",
      "(robocopy . dist\\cache-hive /E /XD .git node_modules src vendor dist lib build .idea .vscode /XF .gitignore .distignore package.json package-lock.json postcss.config.js tailwind.config.js tsconfig.json vite.config.mjs composer.json composer.lock composer.dist.json scoper.inc.php .DS_Store) ^& exit /b 0",
      "xcopy lib dist\\cache-hive\\lib /s /e /i /y",
      "xcopy build dist\\cache-hive\\build /s /e /i /y",
      "copy composer.dist.json dist\\cache-hive\\composer.json",
      "echo START: Generating final production autoloader...",
      "cd dist/cache-hive && composer dump-autoload --no-dev --optimize && cd ../..",
      "del dist\\cache-hive\\composer.json",
      "echo.",
      "echo SUCCESS! Production-ready plugin is in dist\\cache-hive"
    ]
  },
  "config": {
    "allow-plugins": {
      "dealerdirect/phpcodesniffer-composer-installer": true
    }
  }
}
